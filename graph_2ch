#!/usr/bin/php
<?php
/* vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4: */
/**
 * Graph2ch
 * 2chのスレッドの勢いを数値化し出力するためのスクリプト
 * 主にグラフ生成プログラムに渡すために使われる
 *
 * @package		Graph2ch
 * @author		松井 健太郎 (Kentaro Matsui) <info@ke-tai.org>
 * @copyright	ke-tai.org
 * @license		BSD
 **/

// 引数チェック
$config_file = null;
if (isset($argv[1])) {
	$config_file = $argv[1];
}

// 実行
$g2ch = new Graph2ch();
$g2ch->run($config_file);
exit(0);


/**
 * Graph2chクラス
 */
class Graph2ch
{
	protected $config;			// 設定を格納した配列
	protected $board_url;		// 板のURL（移転対応のためクラス変数として保持）

	/**
	 * 実行
	 * @param string $config_file コンフィグファイルのパス
	 */
	public function run($config_file)
	{
		try {
			// 引数のチェック
			if (null === $config_file) {
				// 引数が無い
				throw new Exception('Usage: graph_2ch CONFIG_FILE');
			}

			// コンフィグファイルの読み込み
			$this->config = $this->readConfigFile($config_file);

			// カレントディレクトリ位置の変更（キャッシュファイルの位置を相対パスで扱うため）
			chdir(dirname(__FILE__));

			// 板一覧から対象板のURLを取得
			$this->board_url = $this->getBoardUrl($this->config['BoardName']);

			// 板からスレッド一覧を取得
			$thread_list = $this->getThreadList($this->board_url . $this->config['BoardName']);

			// スレッド一覧からキーワードを含んだスレッド群を特定
			$threads = $this->searchThreadList($thread_list, $this->config['Keyword']);

			// 勢いを算出
			$output_forces = $this->getOutputForces($threads);

			// 出力
			print $output_forces;
		} catch (Exception $e) {
			// エラーを出力して終了
			fputs(STDERR, $e->getMessage() . "\n");
			exit(1);
		}
	}

	/**
	 * 設定デフォルト値取得
	 * @return array 設定値の配列
	 * @see http://info.2ch.net/wiki/index.php?%A4%C8%A4%AB%A4%B2%A4%CE%BF%AC%C8%F8%C0%DA%A4%EA%2F%A5%D0%A1%BC%A5%DC%A5%F3%A5%CF%A5%A6%A5%B9#content_2_19
	 */
	protected function getDefaultConfig()
	{
		return array(
			'MenuListUrl' => 'http://menu.2ch.sc/bbsmenu.html',
			'DatCacheUrl' => '',
			//'DatCacheUrl' => 'http://bg20.2ch.net/test/r.so/',		// バーボンハウス入りを避けることができるキャッシュサーバ
			'Period' => '3600',
			'CacheDir' => './.graph_2ch_cache',		// プログラム本体のディレクトリを起点とする
			'CacheExpire' => '86400',
		);
	}

	/**
	 * コンフィグファイルの読み込み
	 * @param string $config_file コンフィグファイルのパス
	 * @return array 設定値の配列
	 * @throws Exception 各種設定ファイル異常
	 */
	protected function readConfigFile($config_file)
	{
		if (file_exists($config_file)) {
			// ファイルの読み込み
			$config_text = file_get_contents($config_file);
		} else {
			// ファイルが読めなかった場合
			throw new Exception(sprintf('Unable to read config file. (%s)', $config_file));
		}

		// 設定初期値の取得
		$config_arr = $this->getDefaultConfig();

		// デコード処理
		$add_config_arr = json_decode($config_text, true);
		if (null === $add_config_arr) {
			// 不正なjson形式
			throw new Exception(sprintf('Syntax error config file. (%s)', $config_file));
		}
		$config_arr = array_merge($config_arr, $add_config_arr);

		// 必須項目チェック
		$required_keys = array(
			'MenuListUrl',
			'BoardName',
			'Keyword',
			'Period',
			'CacheDir',
		);
		$config_keys = array_keys($config_arr);
		foreach ($required_keys as $key) {
			if (!in_array($key, $config_keys)) {
				// 必須項目がセットされていない
				throw new Exception(sprintf('"%s" is required on config file.', $key));
			}
		}

		return $config_arr;
	}

	/**
	 * 板URLの取得
	 * @param string $board_name 対象板
	 * @return string 板のURL
	 * @throws Exception 板の取得エラー
	 */
	protected function getBoardUrl($board_name)
	{
		// 検索パターン
		$pattern = sprintf('/^\<A HREF=(.+\.2ch\.(sc|net)\/)%s\/\>.*$/i', $board_name);

		// メニューリストを取得
		$menu_list_html = $this->getUrl($this->config['MenuListUrl'], true);

		// ループして対象を検索
		$menu_list = explode("\n", $menu_list_html);
		foreach ($menu_list as $line) {
			if (preg_match($pattern, $line, $matches)) {
				// 対象の板が見つかったらそれをURL形式にして返す
				return $matches[1];
			}
		}

		if (null === $this->board_url) {
			// 対象の板が見つからなかった
			throw new Exception(sprintf('No match board. (%s)', $board_name));
		}
	}

	/**
	 * スレ一覧の取得
	 * @param string $board_url 対象板のURL
	 * @return array スレッドリスト
	 * @throws Exception 各種スレ一覧の取得失敗
	 */
	protected function getThreadList($board_url)
	{
		try {
			$thread_list = $this->getUrl($board_url . '/subject.txt', true);
			if (5 > substr_count($thread_list, "\n")) {
				// 移転と判断
				throw new Exception('Server Moved', -200);		// 特別なステータスコードを使い例外を投げる
			}
		} catch (Exception $e) {
			if ('302' == $e->getCode() or '404' == $e->getCode() or '-200' == $e->getCode()) {
				// サーバが移転している場合
				try {
					$moved_html = $this->getUrl($board_url . '/index.html', false);
					if (preg_match('/.*window.location.href="(.+\/)(.+)\/".*/', $moved_html, $matches)) {
						// 移転があったので板URLを更新
						$this->board_url = $matches[1];

						// 再帰処理でスレッドリストを取得
						return $this->getThreadList($this->board_url . $matches[2]);
					}
				} catch (Exception $sub_e) {
					// 移転先の取得失敗
					throw new Exception(sprintf('Moved server get error. (%s -> %s)', $e->getCode(), $sub_e->getCode()));
				}
			} else {
				// スレッド一覧の取得失敗
				throw new Exception(sprintf('Thread list fetch error. (%s)', $e->getCode()));
			}
		}

		return mb_convert_encoding($thread_list, 'UTF-8', 'SJIS');
	}

	/**
	 * スレッドリスト検索
	 * @param string $thread_list スレッドリスト文字列
	 * @param string $keyword 検索文字列
	 * @return array スレッド情報を格納した配列
	 */
	protected function searchThreadList($thread_list, $keyword)
	{
		$ret_arr = array();
		$thread_list_arr = explode("\n", $thread_list);
		foreach ($thread_list_arr as $thread) {
			if (preg_match($keyword, $thread)) {
				if (preg_match('/^(.*)<>(.*) \(([0-9]+)\)$/', $thread, $matches)) {
					$ret_arr[] = array(
						'dat' => $matches[1],
						'name' => $matches[2],
						'res' => $matches[3],
					);
				}
			}
		}

		return $ret_arr;
	}

	/**
	 * 出力用勢い取得
	 * @param array $threads キーワードを含んだスレッド群を格納した配列
	 * @return int 勢いを表す数字
	 */
	protected function getOutputForces($threads)
	{
		// キーワードに一致するスレッドがあったかで分岐
		$output_forces = 0;
		foreach ($threads as $th) {
			// レスを取得
			$res_list = $this->getResList($th['dat']);

			// スレッドの勢いを調べる
			$forces = $this->getForces($res_list);

			// 一番勢いの高いものを出力する
			if ($forces > $output_forces) {
				$output_forces = $forces;
			}
		}

		return $output_forces;
	}

	/**
	 * レス取得
	 * @param string $dat dat番号
	 * @return array レス情報を格納した連想配列
	 */
	protected function getResList($dat)
	{
		if ('' === $this->config['DatCacheUrl']) {
			// 通常のサーバからdatを取得
			$url = $this->board_url . $this->config['BoardName'] . '/dat/' . $dat;
		} else {
			// バーボンハウスを避けるためクローラ用サーバからdatを取得
			$url = $this->config['DatCacheUrl'] . strtr($this->board_url, array('http://' => '')) . $this->config['BoardName'] . '/' . strtr($dat, array('.dat' => '')) . '/';
		}

		// datファイルを取得
		$dat_contents = $this->getUrl($url, true);
		$dat_arr = explode("\n", $dat_contents);
		array_pop($dat_arr);		// 配列の最後には空要素が入るのでカット

		return $dat_arr;
	}

	/**
	 * 勢い取得
	 * 勢いの算出方法は2ch勢いランキングに準拠
	 * @param array $res_list レス情報を格納した配列
	 * @return int 勢いを表す数字
	 * @link http://2ch-ranking.net/preface.html
	 */
	protected function getForces($res_list)
	{
		// 期間内に投稿されたレスの数を取得
		$res_value = count($res_list);		// 現在のレス数
		$start = count($res_list) - 1;		// 配列は0から始まるのでマイナス1

		// 後ろから検索
		for ($i = $start; $i >= 0; $i--) {
			$tmp_arr = explode('<>', $res_list[$i]);
			$res_ts = strtotime(mb_substr($tmp_arr[2], 0, 10) . ' ' . mb_substr($tmp_arr[2], 15, 8));
			if (time() - $this->config['Period'] > $res_ts) {
				// ここまでが期間内
				$res_value = $res_value - $i;
				break;
			}
		}

		// 勢いを計算（1日あたりの書き込み数相当に変換）
		$forces = $res_value * ((24 * 60 * 60) / $this->config['Period']);

		// 小数点以下2桁で管理
		$forces = round($forces, 2);

		// スレ立て補正 書き込み数10未満->勢い100未満
		if (10 > $res_value) {
			max($forces, 99.99);
		}

		// スレ立て補正 書き込み数5未満->勢い10未満
		if (5 > $res_value) {
			max($forces, 9.99);
		}

		return $forces;
	}

	/**
	 * URLリクエストメソッド
	 * curlによるリクエストを行う
	 * @param string $url 対象URL
	 * @param string $use_cache If-Modified-Sinceヘッダを使ったキャッシュ機構を利用するか
	 * @return string 結果文字列
	 * @throws Exception 予期せぬステータスコード
	 */
	protected function getUrl($url, $use_cache = false)
	{
		// キャッシュファイルの読み込み
		$cache_file = $this->config['CacheDir'] . '/' . urlencode($url);
		if (true == $use_cache) {
			$opt_timevalue = $this->getCacheTimestamp($cache_file);
		} else {
			$opt_timevalue = 0;
		}

		// cURLを利用
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_HEADER, 0);
		curl_setopt($ch, CURLOPT_TIMEVALUE, $opt_timevalue);
		curl_setopt($ch, CURLOPT_TIMECONDITION, CURL_TIMECOND_IFMODSINCE);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_ENCODING, 'gzip');
		$ret = curl_exec($ch);

		if (false === $ret) {
			// curlに失敗した（通信エラー）
			curl_close($ch);
			throw new Exception('curl error.');
		}

		// ステータスコードを取得
		$header = curl_getinfo($ch);
		curl_close($ch);
		$status_code = $header['http_code'];

		// ステータスコードで分岐
		if ('200' == $status_code) {
			// 200 OKの場合、そのまま取得したデータを返す
			if (true == $use_cache) {
				// キャッシュデータを保存
				$this->putCacheFile($cache_file, $ret);
			}
		} elseif (true == $use_cache and '304' == $status_code and file_exists($cache_file)) {
			// 304の場合、キャッシュデータを利用する
			$ret = file_get_contents($cache_file);
		} else {
			// その他の場合、例外を投げる
			throw new Exception('cURL status code error. code=' . $status_code, $status_code);
		}

		// 取得した値を返す
		return $ret;
	}

	/**
	 * キャッシュ時刻取得
	 * キャッシュファイルが作られた時間を取得する。
	 * ただしキャッシュファイルが無かったり、有効期限が切れている場合は0を返す。
	 * @param string $file_name キャッシュファイル名
	 * @return int キャッシュファイルのタイムスタンプ
	 */
	protected function getCacheTimestamp($file_name)
	{
		$timestamp = 0;
		if (file_exists($file_name)) {
			// キャッシュファイルが存在
			$cache_mtime = filemtime($file_name);		// キャッシュが作られたタイムスタンプを取得
			if (time() - $cache_mtime < $this->config['CacheExpire']) {
				// キャッシュの有効期限がまだ切れていない
				$timestamp = $cache_mtime;
			}
		}

		return $timestamp;
	}

	/**
	 * キャッシュファイルへのデータ出力
	 * @param string $file_name キャッシュファイル名
	 * @param string $data 出力データ
	 * @throws Exception ディレクトリ作成エラー, ファイル出力エラー
	 */
	protected function putCacheFile($file_name, $data)
	{
		// ディレクトリがあるか確認
		$dir_name = dirname($file_name);
		if (!file_exists($dir_name)) {
			// 無ければ作成
			if (!mkdir($dir_name)) {
				throw new Exception(sprintf('Cache directory make error. (%s)', $dir_name));
			}
		}

		// ファイルに出力
		$fp = fopen($file_name, 'w');		// 書き込みモードでファイルをオープン
		if ((empty($fp))) {
			// 書き込みエラー
			throw new Exception(sprintf('Cache file output error. (%s)', $file_name));
		}

		// データの書き出し
		flock($fp, LOCK_EX);
		fputs($fp, $data);
		flock($fp, LOCK_UN);
		fclose($fp);
	}
}

